import { CommonModule } from '@angular/common';
import { Component, inject, OnInit } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  FormsModule,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import {
  IonButton,
  IonCol,
  IonGrid,
  IonIcon,
  IonLabel,
  IonRow,
} from '@ionic/angular/standalone';
import { addIcons } from 'ionicons';
import {
  add,
  alarm,
  albums,
  alert,
  analytics,
  aperture,
  apps,
  archive,
  arrowBack,
  arrowDown,
  arrowForward,
  arrowUp,
  at,
  attach,
  backspace,
  bag,
  barChart,
  barcode,
  batteryCharging,
  batteryDead,
  batteryFull,
  bed,
  beer,
  bicycle,
  bluetooth,
  boat,
  body,
  bonfire,
  book,
  bookmark,
  briefcase,
  brush,
  bug,
  build,
  bus,
  business,
  cafe,
  calculator,
  calendar,
  call,
  camera,
  car,
  card,
  cart,
  cash,
  chatbubble,
  checkmark,
  checkbox,
  clipboard,
  cloud,
  code,
  colorPalette,
  compass,
  construct,
  contrast,
  copy,
  create,
  cube,
  cut,
  desktop,
  document,
  download,
  ear,
  earth,
  eye,
  fastFood,
  female,
  fileTray,
  fingerPrint,
  fitness,
  flag,
  flame,
  flash,
  flask,
  folder,
  football,
  gameController,
  gift,
  glasses,
  globe,
  grid,
  hammer,
  handLeft,
  happy,
  headset,
  heart,
  help,
  home,
  hourglass,
  iceCream,
  image,
  infinite,
  informationCircle,
  journal,
  key,
  layers,
  leaf,
  link,
  list,
  lockClosed,
  logIn,
  magnet,
  mail,
  man,
  map,
  medal,
  medical,
  mic,
  moon,
  musicalNotes,
  navigate,
  notifications,
  paperPlane,
  partlySunny,
  pause,
  paw,
  person,
  phonePortrait,
  pizza,
  planet,
  play,
  power,
  print,
  pulse,
  qrCode,
  rainy,
  reader,
  refresh,
  rocket,
  rose,
  save,
  school,
  search,
  send,
  server,
  settings,
  shieldCheckmark,
  shirt,
  shuffle,
  skull,
  snow,
  sparkles,
  star,
  statsChart,
  storefront,
  sunny,
  sync,
  tabletPortrait,
  thermometer,
  thumbsUp,
  time,
  timer,
  train,
  trash,
  trendingUp,
  trophy,
  umbrella,
  videocam,
  wallet,
  warning,
  water,
  wifi,
  woman,
} from 'ionicons/icons';
import { CategoriaCredencialService } from 'src/app/service/categoria-credencial.service';

@Component({
  selector: 'app-pessoa-cadastrar',
  templateUrl: './pessoa-cadastrar.page.html',
  styleUrls: ['./pessoa-cadastrar.page.scss'],
  standalone: true,
  imports: [
    IonGrid,
    IonRow,
    IonButton,
    IonIcon,
    IonLabel,
    CommonModule,
    FormsModule,
    IonCol,
    ReactiveFormsModule,
  ],
})
export class PessoaCadastrarPage implements OnInit {

  public iconeList: string[] = [
    'add',
    'alarm',
    'albums',
    'alert',
    'analytics',
    'aperture',
    'apps',
    'archive',
    'arrowBack',
    'arrowDown',
    'arrowForward',
    'arrowUp',
    'at',
    'attach',
    'backspace',
    'bag',
    'barChart',
    'barcode',
    'batteryCharging',
    'batteryDead',
    'batteryFull',
    'bed',
    'beer',
    'bicycle',
    'bluetooth',
    'boat',
    'body',
    'bonfire',
    'book',
    'bookmark',
    'briefcase',
    'brush',
    'bug',
    'build',
    'bus',
    'business',
    'cafe',
    'calculator',
    'calendar',
    'call',
    'camera',
    'car',
    'card',
    'cart',
    'cash',
    'chatbubble',
    'checkmark',
    'checkbox',
    'clipboard',
    'cloud',
    'code',
    'colorPalette',
    'compass',
    'construct',
    'contrast',
    'copy',
    'create',
    'cube',
    'cut',
    'desktop',
    'document',
    'download',
    'ear',
    'earth',
    'eye',
    'fastFood',
    'female',
    'fileTray',
    'fingerPrint',
    'fitness',
    'flag',
    'flame',
    'flash',
    'flask',
    'folder',
    'football',
    'gameController',
    'gift',
    'glasses',
    'globe',
    'grid',
    'hammer',
    'handLeft',
    'happy',
    'headset',
    'heart',
    'help',
    'home',
    'hourglass',
    'iceCream',
    'image',
    'infinite',
    'informationCircle',
    'journal',
    'key',
    'layers',
    'leaf',
    'link',
    'list',
    'lockClosed',
    'logIn',
    'magnet',
    'mail',
    'man',
    'map',
    'medal',
    'medical',
    'mic',
    'moon',
    'musicalNotes',
    'navigate',
    'notifications',
    'paperPlane',
    'paperclip',
    'partlySunny',
    'pause',
    'paw',
    'person',
    'phonePortrait',
    'pizza',
    'planet',
    'play',
    'power',
    'print',
    'pulse',
    'qrCode',
    'rainy',
    'reader',
    'refresh',
    'rocket',
    'rose',
    'save',
    'school',
    'search',
    'send',
    'server',
    'settings',
    'shieldCheckmark',
    'shirt',
    'shuffle',
    'skull',
    'snow',
    'sparkles',
    'star',
    'statsChart',
    'storefront',
    'sunny',
    'sync',
    'tabletPortrait',
    'thermometer',
    'thumbsUp',
    'time',
    'timer',
    'train',
    'trash',
    'trendingUp',
    'trophy',
    'umbrella',
    'videocam',
    'wallet',
    'warning',
    'water',
    'wifi',
    'woman',
  ];

  public corList: string[] = [];

  public iconeSelecionado: string | null = null;

  public corSelecionada: string | null = null;

  public categoriaCredencialFormGroup!: FormGroup;

  private formBuilder = inject(FormBuilder);

  private categoriaCredencialService = inject(CategoriaCredencialService);

  constructor() {
    addIcons({
      add,
      alarm,
      albums,
      alert,
      analytics,
      aperture,
      apps,
      archive,
      arrowBack,
      arrowDown,
      arrowForward,
      arrowUp,
      at,
      attach,
      backspace,
      bag,
      barChart,
      barcode,
      batteryCharging,
      batteryDead,
      batteryFull,
      bed,
      beer,
      bicycle,
      bluetooth,
      boat,
      body,
      bonfire,
      book,
      bookmark,
      briefcase,
      brush,
      bug,
      build,
      bus,
      business,
      cafe,
      calculator,
      calendar,
      call,
      camera,
      car,
      card,
      cart,
      cash,
      chatbubble,
      checkmark,
      checkbox,
      clipboard,
      cloud,
      code,
      colorPalette,
      compass,
      construct,
      contrast,
      copy,
      create,
      cube,
      cut,
      desktop,
      document,
      download,
      ear,
      earth,
      eye,
      fastFood,
      female,
      fileTray,
      fingerPrint,
      fitness,
      flag,
      flame,
      flash,
      flask,
      folder,
      football,
      gameController,
      gift,
      glasses,
      globe,
      grid,
      hammer,
      handLeft,
      happy,
      headset,
      heart,
      help,
      home,
      hourglass,
      iceCream,
      image,
      infinite,
      informationCircle,
      journal,
      key,
      layers,
      leaf,
      link,
      list,
      lockClosed,
      logIn,
      magnet,
      mail,
      man,
      map,
      medal,
      medical,
      mic,
      moon,
      musicalNotes,
      navigate,
      notifications,
      paperPlane,
      partlySunny,
      pause,
      paw,
      person,
      phonePortrait,
      pizza,
      planet,
      play,
      power,
      print,
      pulse,
      qrCode,
      rainy,
      reader,
      refresh,
      rocket,
      rose,
      save,
      school,
      search,
      send,
      server,
      settings,
      shieldCheckmark,
      shirt,
      shuffle,
      skull,
      snow,
      sparkles,
      star,
      statsChart,
      storefront,
      sunny,
      sync,
      tabletPortrait,
      thermometer,
      thumbsUp,
      time,
      timer,
      train,
      trash,
      trendingUp,
      trophy,
      umbrella,
      videocam,
      wallet,
      warning,
      water,
      wifi,
      woman,
    });
  }

  ngOnInit() {
    this.gerarCoresAleatorias();
    this.configurarFormulario();
  }

  private getCor(): string {
    const r = Math.floor(Math.random() * 80) + 160;
    const g = Math.floor(Math.random() * 80) + 160;
    const b = Math.floor(Math.random() * 80) + 160;
    const cor = (value: number) => value.toString(16).padStart(2, '0');
    return `#${cor(r)}${cor(g)}${cor(b)}`;
  }

  public gerarCoresAleatorias() {
    for (let index = 0; index < 12; index++) {
      this.corList.push(this.getCor());
    }
  }

  public selecionarIcone(icone: string) {
    this.iconeSelecionado = icone;
    this.categoriaCredencialFormGroup.get('nomeIcone')?.setValue(icone);
  }

  public selecionarCor(cor: string) {
    this.corSelecionada = cor;
    this.categoriaCredencialFormGroup.get('corIcone')?.setValue(cor);
  }

  private configurarFormulario() {
    this.categoriaCredencialFormGroup = this.formBuilder.group({
      descricao: ['', Validators.required],
      nomeIcone: ['', Validators.required],
      corIcone: ['', Validators.required],
    });
  }

  public onCreate() {
    if (this.categoriaCredencialFormGroup.valid) {
      this.categoriaCredencialService.create(this.categoriaCredencialFormGroup.value).subscribe({
        next: (response) => {
          console.log("Dados Cadastrados com Sucesso!");
        },
        error: (response) => {
          console.error("Falha ao tentar cadastrar uma nova Categoria de Credencial!");
          
        }
      });
    }
  }

}
